#!/bin/bash

##  Copyright (C) 2021..2023  Robin ALEXANDER
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <https://www.gnu.org/licenses/>.

DisplayUsage() {

	cat <<- EOF

	${COMMAND} flashes a raspberrypi disk image to a GPT-partitioned device
	and performs a few adjustments to allow the raspberry-pi to boot directly
	from the device.
	When specifying partition sizes:
	  - you can use the suffix K,M,G,T
	  - the special value 0 to indicate the remaining disk space

	Usage:
	${COMMAND} [arguments]

	Required arguments:
	-d device, --device=device
	             Specify the name of the device to be partitioned
	-i disk-image, --image=disk-image
	             Specify the name the source disk image

	Optional arguments:
	--boot-size=size-of-boot-partition
	             Specif the size of the boot partition
	             By default 64M
	--root-size=size-of-root-partition
	             Specify the size of the root partition
	             By default 0 (ie. the remaining disk space)
	--home-size=size-of-home-partition
	             Specify the size of the home partition
	             By default, there is no home partition
	--var-size=size-of-var-partition
	             Specify the size of the var partition
	             By default, there is no var partition
	--enable-ssh
	             Activate ssh
	--quiet
	             Do not print status messages

	EOF
}

ShowMsg() {

	if [ "${beQuiet:=0}" = "0" ]; then
		echo "${1}"
	fi
}

SetSize() {

	if [ "${1}" = "0" ]; then
		echo "${1}"
	else
		echo "+${1}"
	fi
}

GetArguments() {

	while [ "$#" -gt 0 ] ; do
		case "${1}" in
			-h|--help)
				DisplayUsage;
				exit 0
				;;
			-d*|--device*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				deviceName="${1#*=}"
				;;
			-i*|--image*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				diskImage="${1#*=}"
				;;
			--boot-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				partSize[1]=$(SetSize "${1#*=}")
				;;
			--root-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				partSize[2]=$(SetSize "${1#*=}")
				;;
			--home-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				partSize+=("$(SetSize "${1#*=}")")
				partName+=("home")
				partType+=("8300")
				partDevL+=("p2")
				partExcl+=("")
				partRoot+=("/home/")
				partExcl[2]+=" --exclude=/home/"
				;;
			--var-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				partSize+=("$(SetSize "${1#*=}")")
				partName+=("var")
				partType+=("8300")
				partDevL+=("p2")
				partExcl+=("")
				partRoot+=("/var/")
				partExcl[2]+=" --exclude=/var/"
				;;
			--enable-ssh)
				enableSSH="1"
				;;
			--quiet)
				beQuiet="1"
				;;
			*)
				DisplayUsage
				exit 1
				;;
		esac
		shift
	done
}

CheckConditions() {

	# Check that the program is run by root
	if [ $(id -u) -ne 0 ]; then
		echo "${COMMAND} must be run as root" >&2
		exit 2
	fi

	# Check the device
	if [ -z "${deviceName}" ]; then
		echo "Device name not specified" >&2
		exit 3
	fi

	if ! [ -b "${deviceName}" ]; then
		echo "Device ${deviceName} not a block device" >&2
		exit 3
	fi

	# Check the disk image
	if [ -z "${diskImage}" ]; then
		echo "Disk image not specified" >&2
		exit 4
	fi

	if ! [ -f ${diskImage} ]; then
		echo "Disk image ${diskImage} not found" >&2
		exit 4
	fi

	# Check that there are no more than 1 partition with value 0
	partitions0=$(echo -n "${partSize[@]}" | \
		sed -e "s/ *0 */@/g" -e "s/[^@]//g" | wc --chars)
	if [ ${partitions0} -gt 1 ]; then
		echo "Only 1 partition can take the remaining disk" >&2
		exit 5
	fi
}

CheckDependencies() {

	while [ "$#" -gt 0 ] ; do
		if ! [ $(which "${1}") ]; then
			echo "Command ${1} not found" >&2
			exit 10
		fi
		shift
	done
}

SetPartition() {

	local size="${1}"
	local type="${2}"
	local name="${3}"
	local numPart="${4}"

	ShowMsg " > Creating and formatting ${name} on ${deviceName}${numPart}..."

	sgdisk \
		--new=0:0:${size} \
		--typecode=0:${type} \
		--change-name=0:${name} \
		${deviceName} 1>/dev/null 2>&1

	if [ "${type}" = "0700" ]; then
		mkfs.fat -F 32 -n ${name} ${deviceName}${numPart} 1>/dev/null 2>&1
	else
		mkfs.ext4 -F -L ${name} ${deviceName}${numPart} 1>/dev/null 2>&1
	fi
}


CopyPartition() {

	local deviceFrom="${1}"
	local deviceTo="${2}"
	local excludes="${3}"
	local dirFrom="${4}"

	mount --read-only ${deviceFrom} ${tempDir}/from
	mount ${deviceTo} ${tempDir}/to

	ShowMsg " > Copying files to ${deviceTo}..."
	rsync --archive ${excludes} ${tempDir}/from${dirFrom} ${tempDir}/to
	sync
	umount ${tempDir}/from
	umount ${tempDir}/to
}

AddHybridMBR() {

	ShowMsg " > Adding hybrid MBR table..."
	cat <<- EOF | gdisk ${deviceName} 1>/dev/null
		r
		h
		1
		N
		0c
		N
		Y
		EE
		w
		Y
		EOF

}

Cleanup() {

	ShowMsg " > Cleaning up..."
	sync

	# Unmount partitions and delete the temporary directory
	if [ -n "${tempDir}" ] && [ -d ${tempDir} ]; then
		while (mount | grep --silent ${tempDir}/from); do
			umount ${tempDir}/from
		done
		while (mount | grep --silent ${tempDir}/to); do
			umount ${tempDir}/to
		done
		rm -rf ${tempDir}
	fi

	# Unmap disk image
	if [ -n "${loopDevice}" ]; then
		losetup --detach ${loopDevice}
	fi
}

AdjustBootFiles() {

	ShowMsg " > Adjusting file /boot/cmdline.txt..."
	mount "${deviceName}1" "${tempDir}/to"
	sed \
		-e 's: init=[[:graph:]]*::' \
		-e 's: fsck.repair=yes::' \
		-e 's: quiet::' \
		-e 's:root=PARTUUID=[0-9,a-f,\-]*:root=PARTLABEL=root:' \
		-i ${tempDir}/to/cmdline.txt

	if [ "${enableSSH}" = "1" ]; then
		ShowMsg " > Enabling ssh..."
		touch ${tempDir}/to/ssh
	fi

	umount "${tempDir}/to"
}

AdjustRootFiles() {

	ShowMsg " > Adjusting file /etc/fstab..."
	mount "${deviceName}2" "${tempDir}/to"
	sed \
		-e 's:^PARTUUID=.*/boot:PARTLABEL=boot \t/boot:' \
		-e 's:^PARTUUID=.*/[[:blank:]]:PARTLABEL=root \t/:' \
		-i ${tempDir}/to/etc/fstab

	if [ "$(echo -n "${partName[@]}" | grep home)" ]; then
		echo \
			"PARTLABEL=home  /home          ext4    defaults,noatime  0       1" \
			>> ${tempDir}/to/etc/fstab
	fi

	if [ "$(echo -n "${partName[@]}" | grep var)" ]; then
		echo \
			"PARTLABEL=var   /var           ext4    defaults,noatime  0       1" \
			>> ${tempDir}/to/etc/fstab
	fi

	umount "${tempDir}/to"
}

# MAIN
## Set program execution flags
set -Eeuo pipefail

## Intercept interruptions
trap Cleanup ERR HUP INT QUIT ABRT TERM

## Initialize constants and variables
readonly COMMAND=$(basename ${0})
deviceName=""
diskImage=""
tempDir=""
loopDevice=""
enableSSH="0"
partName=([1]="boot" [2]="root")
partType=([1]="0700" [2]="8300")
partSize=([1]="+64M" [2]="0")
partDevL=([1]="p1"   [2]="p2")
partExcl=([1]=""     [2]="")
partRoot=([1]="/"    [2]="/")

## Get arguments
GetArguments $@

## Check conditions
CheckConditions

## Check dependencies
CheckDependencies rsync sfdisk sgdisk mkfs.fat mkfs.ext4 losetup

## unmount the partitions of the specified device, if any
mountpoints=$(lsblk \
	--noheadings --list --output MOUNTPOINT ${deviceName} 2>/dev/null)
for mp in ${mountpoints}; do
	umount ${mp}
done

## Create a temporary directory structure
tempDir=$(mktemp --directory)
mkdir ${tempDir}/from
mkdir ${tempDir}/to

## Map the disk image to a loop device
loopDevice=$(losetup --find --partscan --show ${diskImage})

## Clear the destination device
ShowMsg " > Erasing device ${deviceName}..."
sgdisk --zap-all ${deviceName} 1>/dev/null

## Perform smart copy
for i in "${!partSize[@]}"; do
	SetPartition "${partSize[i]}" "${partType[i]}" "${partName[i]}" "${i}"
	CopyPartition \
		"${loopDevice}${partDevL[i]}" "${deviceName}${i}" \
		"${partExcl[i]}" "${partRoot[i]}"
done

## Adjust files
AdjustBootFiles
AdjustRootFiles

## Create an hybrid MBR with partition type "0c" so that bootloader finds it
AddHybridMBR

# Clean up and exit
Cleanup
ShowMsg "Operation completed"
exit 0
