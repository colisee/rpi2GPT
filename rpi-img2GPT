#!/bin/bash

##  Copyright (C) 2021..2023  Robin ALEXANDER
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <https://www.gnu.org/licenses/>.

DisplayUsage() {

	cat <<- EOF

	${COMMAND} flashes a raspberrypi disk image to a GPT-partitioned device
	and performs a few adjustments to allow the raspberry-pi to boot directly
	from the device.
	When specifying partition sizes:
	  - you can use the suffix K,M,G,T
	  - the special value 0 to indicate the remaining disk space

	Usage:
	${COMMAND} [arguments]

	Required arguments:
	-d device, --device=device
	             Specify the name of the device to be partitioned
	-i disk-image, --image=disk-image
	             Specify the name the source disk image

	Optional arguments:
	--boot-size=size-of-boot-partition
	             Specif the size of the boot partition
	             By default 64M
	--root-size=size-of-root-partition
	             Specify the size of the root partition
	             By default 0 (ie. the remaining disk space)
	--home-size=size-of-home-partition
	             Specify the size of the home partition
	             By default, there is no home partition
	--var-size=size-of-var-partition
	             Specify the size of the var partition
	             By default, there is no var partition
	--enable-ssh
	             Activate ssh

	EOF
}

SetSize() {

	if [ "${1}" = "0" ]; then
		echo "${1}"
	else
		echo "+${1}"
	fi
}

GetArguments() {

	while [ "$#" -gt 0 ] ; do
		case "${1}" in
			-h|--help)
				DisplayUsage;
				exit 0
				;;
			-d*|--device*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				deviceName="${1#*=}"
				;;
			-i*|--image*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				diskImage="${1#*=}"
				;;
			--boot-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				bootSize=$(SetSize "${1#*=}")
				;;
			--root-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				rootSize=$(SetSize "${1#*=}")
				;;
			--home-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				homeSize=$(SetSize "${1#*=}")
				;;
			--var-size*)
				if [ "${1}" = "${1#*=}" ]; then shift; fi
				varSize=$(SetSize "${1#*=}")
				;;
			--enable-ssh)
				enableSSH="1"
				;;
			*)
				DisplayUsage
				exit 1
				;;
		esac
		shift
	done
}

CheckConditions() {

	# Check that the program is run by root
	if [ $(id -u) -ne 0 ]; then
		echo "${COMMAND} must be run as root" >&2
		exit 2
	fi

	# Check the device
	if [ -z "${deviceName}" ]; then
		echo "Device name not specified" >&2
		exit 3
	fi

	if ! [ -b "${deviceName}" ]; then
		echo "Device ${deviceName} not a block device" >&2
		exit 3
	fi

	# Check the disk image
	if [ -z "${diskImage}" ]; then
		echo "Disk image not specified" >&2
		exit 4
	fi

	if ! [ -f ${diskImage} ]; then
		echo "Disk image ${diskImage} not found" >&2
		exit 4
	fi

	# Check that there are no more than 1 partition with value 0
	partitions0=$(echo -n "${bootSize}-${rootSize}-${homeSize}-${varSize}" | \
		sed -e "s/-*0-*/@/g" -e "s/[^@]//g" | wc --chars)
	if [ ${partitions0} -gt 1 ]; then
		echo "Only 1 partition can take the remaining disk" >&2
		exit 5
	fi
}

CheckDependencies() {

	while [ "$#" -gt 0 ] ; do
		if ! [ $(which "${1}") ]; then
			echo "Command ${1} not found" >&2
			exit 10
		fi
		shift
	done
}

Cleanup() {

	echo " > Cleaning up..."

	# Unmount partitions and delete the temporary directory
	if [ -n "${tempDir}" ] && [ -d ${tempDir} ]; then
		if (mount | grep --silent ${tempDir}); then
			umount ${tempDir}/from
			umount ${tempDir}/to
		fi
		rm -rf ${tempDir}
	fi

	# Unmap disk image
	if [ -n "${loopDevice}" ]; then
		losetup --detach ${loopDevice}
	fi
}

# STEP-1: Initialize the program
## Set program execution flags
set -euo pipefail

## Initialize constants and variables
readonly COMMAND=$(basename ${0})
bootSize="+64M"
rootSize="0"
homeSize=""
varSize=""
deviceName=""
diskImage=""
tempDir=""
loopDevice=""
enableSSH="0"

## Get arguments
GetArguments $@

## Check conditions
CheckConditions

## Check dependencies
CheckDependencies rsync sfdisk sgdisk mkfs.fat mkfs.ext4 losetup

## Intercept interruptions
trap Cleanup SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM

# STEP-2: Prepare the GPT device
## unmount the partitions of the specified device, if any
mountpoints=$(lsblk \
	--noheadings --list --output MOUNTPOINT ${deviceName} 2>/dev/null)
for mp in ${mountpoints}; do
	umount ${mp}
done

## Remove previous content
echo " > Erasing device ${deviceName}..."
sgdisk --zap-all ${deviceName} 1>/dev/null

## Create and format the partitions
echo " > Creating and formatting partition boot on ${deviceName}1..."
sgdisk \
	--new=0:0:${bootSize} \
	--typecode=0:0700 \
	--change-name=0:boot \
	${deviceName} 1>/dev/null 2>&1
mkfs.fat -F 32 -n BOOT ${deviceName}1 1>/dev/null 2>&1

echo " > Creating and formatting partition root on ${deviceName}2..."
sgdisk \
	--new=0:0:${rootSize} \
	--typecode=0:8300 \
	--change-name=0:root \
	${deviceName} 1>/dev/null 2>&1
mkfs.ext4 -F -L root ${deviceName}2 1>/dev/null 2>&1

if [ -n "${homeSize}" ]; then
	echo " > Creating and formatting partition home on ${deviceName}3..."
	sgdisk \
		--new=0:0:${homeSize} \
		--typecode=0:8300 \
		--change-name=0:home \
		${deviceName} 1>/dev/null 2>&1
	mkfs.ext4 -F -L home ${deviceName}3 1>/dev/null 2>&1
fi

if [ -n "${varSize}" ]; then
	if [ -n "${homeSize}" ]; then
	  varPart=4
	else
		varPart=3
	fi
	echo " > Creating and formatting partition var on ${deviceName}${varPart}..."
	sgdisk \
		--new=0:0:${varSize} \
		--typecode=0:8300 \
		--change-name=0:var \
		${deviceName} 1>/dev/null 2>&1
		mkfs.ext4 -F -L var ${deviceName}${varPart} 1>/dev/null 2>&1
fi

## Create an hybrid MBR with partition type "0c" so that bootloader finds it
echo " > Adding hybrid MBR table..."
cat << EOF | gdisk ${deviceName} 1>/dev/null
r
h
1
N
0c
N
Y
EE
w
Y
EOF

# STEP-3: Copy the content of the disk image to the GPT device

## Map the disk image to a loop device
loopDevice=$(losetup --find --partscan --show ${diskImage})

## Create a temporary directory structure
tempDir=$(mktemp --directory)
mkdir ${tempDir}/from
mkdir ${tempDir}/to

## Copy boot partition
mount --read-only ${loopDevice}p1 ${tempDir}/from
mount ${deviceName}1 ${tempDir}/to

echo " > Copying boot-partition files..."
rsync --archive ${tempDir}/from/* ${tempDir}/to
echo " > Adjusting file /boot/cmdline.txt..."
sed \
	-e 's: init=[[:graph:]]*::' \
	-e 's: fsck.repair=yes::' \
	-e 's: quiet::' \
	-e 's:root=PARTUUID=[0-9,a-f,\-]*:root=PARTLABEL=root:' \
	-i ${tempDir}/to/cmdline.txt

if [ "${enableSSH}" = "1" ]; then
	echo " > Enabling ssh..."
	touch ${tempDir}/to/ssh
fi

umount ${loopDevice}p1
umount ${deviceName}1

## Copy root partition
mount --read-only ${loopDevice}p2 ${tempDir}/from
mount ${deviceName}2 ${tempDir}/to

echo " > Copying root-partition files..."
excludeDirs=""
if [ -n "${homeSize}" ]; then
	excludeDirs="--exclude='${tempDir}/from/home' ${excludeDirs}"
fi
if [ -n "${varSize}" ]; then
	excludeDirs="--exclude='${tempDir}/from/var' ${excludeDirs}"
fi
rsync --archive ${excludeDirs} ${tempDir}/from/ ${tempDir}/to

echo " > Adjusting file /etc/fstab..."
sed \
	-e 's:^PARTUUID=.*/boot:PARTLABEL=boot \t/boot:' \
	-e 's:^PARTUUID=.*/[[:blank:]]:PARTLABEL=root \t/:' \
	-i ${tempDir}/to/etc/fstab
if [ -n "${homeSize}" ]; then
	echo \
		"PARTLABEL=home  /home          ext4    defaults,noatime  0       1" \
		>> ${tempDir}/to/etc/fstab
fi
if [ -n "${varSize}" ]; then
	echo \
		"PARTLABEL=var   /var           ext4    defaults,noatime  0       1" \
		>> ${tempDir}/to/etc/fstab
fi

umount ${loopDevice}p2
umount ${deviceName}2

## Copy home partition
if [ -n "${homeSize}" ]; then
	mount --read-only ${loopDevice}p2 ${tempDir}/from
	mount ${deviceName}3 ${tempDir}/to

	echo " > Copying home-partition files"
	rsync --archive ${tempDir}/from/home/ ${tempDir}/to

	umount ${loopDevice}p2
	umount ${deviceName}3
fi

## Copy var partition
if [ -n "${varSize}" ]; then
	mount --read-only ${loopDevice}p2 ${tempDir}/from
	mount ${deviceName}${varPart} ${tempDir}/to

	echo " > Copying var-partition files"
	rsync --archive ${tempDir}/from/var/ ${tempDir}/to

	umount ${loopDevice}p2
	umount ${deviceName}${varPart}
fi

# Clean up and exit
Cleanup
echo "Operation completed"
exit 0
